@page "/search"
@using DemoProject.DatabaseContext
@inject HttpClient Http
<h3>Vehicle</h3>

@if (vehicles == null)
{
    <p><em>Loading...</em></p>
}

else
{
<EditForm Model="@vehicles" OnValidSubmit="@HandleValidSubmit">
    <input type="text" id="txtSearch"
           placeholder="Search Names..."
           class="form-control" @bind="SearchTerm" />
    <input type="submit" value="Filter">

    @code{
        protected async Task HandleValidSubmit()
        {
            var url = $"/api/Vehicle/GetVehicle/{searchTerm}";
            vehicles = await Http.GetJsonAsync<Vehicle[]>(url).ConfigureAwait(false);
          
            this.StateHasChanged();
        }
    }
</EditForm>
        @*<div class="row col-md-3 pull-right">
                <input type="text" id="txtSearch"
                       placeholder="Search Names..."
                       class="form-control" @bind="SearchTerm" @bind:event="oninput"/>
            </div>*@

        <table class="table">
            <thead>

                <tr>
                    <th>VehicleNumber</th>
                    <th>UserID</th>
                    <th>VehicleType</th>
                    <th>ChassisNumber</th>
                    <th>EngineNumber</th>
                    <th>ManufacturingYear</th>
                    <th>LoadCarryingCapacity</th>
                    <th>MakeOfVehicle</th>
                    <th>ModelNumber</th>
                    <th>BodyType</th>
                    <th>OrganisationName</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var vehicle in vehicles)
                {
                    <tr>
                        <td>@vehicle.VehicleNumber</td>
                        <td>@vehicle.UserId</td>
                        <td>@vehicle.VehicleType</td>
                        <td>@vehicle.ChassisNumber</td>
                        <td>@vehicle.EngineNumber</td>
                        <td>@vehicle.ManufacturingYear</td>
                        <td>@vehicle.LoadCarryingCapacity</td>
                        <td>@vehicle.MakeOfVehicle</td>
                        <td>@vehicle.ModelNumber</td>
                        <td>@vehicle.BodyType</td>
                        <td>@vehicle.OrganisationName</td>


                    </tr>
                }
            </tbody>
        </table>
        <div class="pagination">
            <button class="btn btn-custom"
                    @onclick=@(async ()=>await NavigateToPage ("previous"))>
                ◀
            </button>

            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn btn-custom pagebutton
            @(currentPage==curPage?"btn-info":"")"
                        @onclick=@(async () =>await refreshRecords
            (currentPage))>
                    @currentPage
                </button>
            }

            <button class="btn btn-custom"
                    @onclick=@(async ()=>await NavigateToPage("next"))>
                ▶
            </button>
        </div>
        }

        @functions
{
            Vehicle[] vehicles;
            protected override async Task OnInitializedAsync()
            {
                vehicles = await Http.GetFromJsonAsync<Vehicle[]>("Vehicle");
            }
            #region Pagination

            int totalPages;
            int totalRecords;
            int curPage;
            int pagerSize;
            int pageSize;
            int startPage;
            int endPage;
            string sortColumnName = "Id";
            string sortDir = "DESC";

            #endregion

            private string searchTerm;
            private string SearchTerm
            {
                get { return searchTerm; }
                set { searchTerm = value; FilterRecords(); }
            }
            async void FormSubmitted(EditContext editContext)
            {
                var url = $"/api/Vehicle/GetVehicle/{searchTerm}";
                vehicles = await Http.GetJsonAsync<Vehicle[]>(url).ConfigureAwait(false);
                // curPage = currentPage;
                this.StateHasChanged();
            }
            public async Task refreshRecords(int currentPage)
            {
                //publishers = await publisherService.ListAll
                //   ((currentPage - 1) * pageSize, pageSize, sortColumnName,
                //   sortDir, searchTerm);
                var url = $"/api/Vehicle/GetVehicle/{searchTerm}";
                vehicles = await Http.GetJsonAsync<Vehicle[]>(url).ConfigureAwait(false);
                curPage = currentPage;
                this.StateHasChanged();
            }

            public void SetPagerSize(string direction)
            {
                if (direction == "forward" && endPage < totalPages)
                {
                    startPage = endPage + 1;
                    if (endPage + pagerSize < totalPages)
                    {
                        endPage = startPage + pagerSize - 1;
                    }
                    else
                    {
                        endPage = totalPages;
                    }
                    this.StateHasChanged();
                }
                else if (direction == "back" && startPage > 1)
                {
                    endPage = startPage - 1;
                    startPage = startPage - pagerSize;
                }
                else
                {
                    startPage = 1;
                    endPage = totalPages;
                }
            }

            public async Task NavigateToPage(string direction)
            {
                if (direction == "next")
                {
                    if (curPage < totalPages)
                    {
                        if (curPage == endPage)
                        {
                            SetPagerSize("forward");
                        }
                        curPage += 1;
                    }
                }
                else if (direction == "previous")
                {
                    if (curPage > 1)
                    {
                        if (curPage == startPage)
                        {
                            SetPagerSize("back");
                        }
                        curPage -= 1;
                    }
                }
                await refreshRecords(curPage);
            }
            public void FilterRecords()
            {
                endPage = 0;
                this.OnInitializedAsync().Wait();
            }
        }



